#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX 20

void bubble_asc(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void bubble_dsc(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[MAX], n, pid;

    printf("Enter number of elements: ");  
    scanf("%d", &n);

    printf("Enter array elements: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    pid = fork();

    if (pid == 0) { // Child process
        printf("\nChild process (PID: %d) sorting in ascending order...\n", getpid());
        bubble_asc(arr, n);
        printf("Sorted array in ascending order: ");
        print_array(arr, n);
        
    } else if (pid > 0) { // Parent process
        wait(NULL); // Wait for the child process to complete
        printf("\nParent process (PID: %d) sorting in descending order...\n", getpid());
        bubble_dsc(arr, n); 
        printf("Sorted array in descending order: ");
        print_array(arr, n);
        
    } else {
        perror("Fork failed");
    }

    return 0;
}
