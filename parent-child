//PARENT.C

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void bubble_asc(int arr[], int n) {
    int temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    printf("\nArray in ascending order: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Please provide integer arguments to sort.\n");
        return 1;
    }

    int n = argc - 1;
    int arr[n];
    for (int i = 0; i < n; i++) {
        arr[i] = atoi(argv[i + 1]);
    }
    bubble_asc(arr, n);

    char *args[n + 2];
    args[0] = "./bb";
    for (int i = 0; i < n; i++) {
        args[i + 1] = malloc(10);
        sprintf(args[i + 1], "%d", arr[i]);
    }
    args[n + 1] = NULL;

    pid_t pid = fork();
    if (pid == 0) {
        printf("\nI am the Child Process, PID: %d\n", getpid());
        execve(args[0], args, NULL);
        perror("execve failed");
        return 1;
    } else if (pid > 0) {
        wait(NULL);
        printf("\nChild process completed.\n");
    } else {
        perror("fork failed");
        return 1;
    }
    for (int i = 1; i <= n; i++) {
        free(args[i]);
    }
    return 0;
}



//CHILD.C

#include <stdio.h>
#include <stdlib.h>

void bubble_dsc(int arr[], int n) {
    int temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    printf("\nArray in descending order: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Please provide integer arguments to sort.\n");
        return 1;
    }

    int n = argc - 1;
    int arr[n];
    for (int i = 0; i < n; i++) {
        arr[i] = atoi(argv[i + 1]);
    }
    bubble_dsc(arr, n);
    return 0;
}



// to execute this run "gcc -o parent parent.c" and  "gcc -o child child.c" and for output "./parent 5 2 7 9 4"

